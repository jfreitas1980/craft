//-2WA
// Register all objects
Register_Object oCSAG337_DD
Register_Object oWindowsService


Register_Function  f_Decode_Period String slCode Returns Integer
Register_Function  f_Decode_Day String slDay Returns Integer
Register_Procedure p_Write_dTime Integer idTime Date dDtLastRun String sHrLastRun

Define Week_Length for |CI7
Define Day_Length  for |CI1440
Define Hour_Length for |CI60

Define ERROR_FILE_NOT_FOUND for 2 // The specified file was not found.
Define SE_ERR_FNF for 2 // The specified file was not found.
Define SE_ERR_PNF for 3 // The specified path was not found.
Define ERROR_PATH_NOT_FOUND for 3 // The specified path was not found.
Define SE_ERR_ACCESSDENIED for 5 // The operating system denied access to the specified file.
Define SE_ERR_OOM for 8 // There was not enough memory to complete the operation.
Define ERROR_BAD_FORMAT for 11 // The .exe file is invalid (non-Win32r .exe or error in .exe image).
Define SE_ERR_SHARE for 26 // A sharing violation occurred.
Define SE_ERR_ASSOCINCOMPLETE for 27 // The file name association is incomplete or invalid.
Define SE_ERR_DDETIMEOUT for 28 // The DDE transaction could not be completed because the request timed out.
Define SE_ERR_DDEFAIL for 29 // The DDE transaction failed.
Define SE_ERR_DDEBUSY for 30 // The DDE transaction could not be completed because other DDE transactions were being processed.
Define SE_ERR_NOASSOC for 31 // There is no application associated with the given file name extension. This error will also be returned if you attempt to print a file that is not printable.
Define SE_ERR_DLLNOTFOUND for 32 // The specified dynamic-link library was not found.

// external function call used in Procedure DoStartDocument
External_Function ShellExecute "ShellExecuteA" shell32.dll ;
   Handle hWnd ;
   String lpOperation ;
   String lpFile ;
   String lpParameters ;
   String lpDirectory ;
   DWord iShowCmd ;
   Returns Handle

   
Open CSAG337


Use BatchDD.pkg
Use statALog.pkg

Object oStatus_Log is a StatusAsciiLog
    Set Log_Channel to 7
    Set Log_Name    to ".\WindowsService.log"
End_Object // oStatus_Log



Object oWindowsService is a BusinessProcess

    
        Object oCSAG337_DD is a DataDictionary
            Set Main_File to CSAG337.FILE_NUMBER
    
            Send DefineAllExtendedFields
    
        End_Object // oCSAG337_DD
    
    Set Status_Panel_State to FALSE
    Set Status_Log_State to False
    Set Status_Log_Id to oStatus_Log

    // Send DoProcess to this BPO to start the business process
    // DoProcess is a predefined method in the BusinessProcess class
    // Send DoProcess of oNewBusinessProcess
    
    // OnProcess
    // ---------
    // Place your processing code into Procedure OnProcess
    // OnProcess is a predefined method in the BusinessProcess class
    
    Procedure OnProcess
        Date     dlToday
        Integer  idTime
        Integer  ilMultiplier
        Integer  ilPeriod
        Integer  iPeriodoItself
        Integer  ilRunIt
        Integer  ilTodayDay
        Integer  ilSchedDay
        String   slHH
        String   slMM
        String   slTime
        String   sTransaction
        String   slPeriodType
        String   slDay
        String   slModuleld
        DateTime dtVar
        Date     dDtLastRun
        String   sHrLastRun
    
        Sysdate dlToday slHH slMM
    
        If (Integer(slMM)<10) Move (Insert('0', slMM, 1)) to slMM
        If (Integer(slHH)<10) Move (Insert('0', slHH, 1)) to slHH
    
        Move (slHH + slMM) to slTime
    
        Move dlToday           to dDtLastRun
        Move (slHH +':'+ slMM) to sHrLastRun
    
        //--- WE NEED AN INTEGER TO REPRESENT THE TIME OF DAY TO ELIMINATE CROSS MIDNIGHT PROBLEMS.
        //    WE CREATED A SINGLE INTEGER FROM THE DATE, HOUR AND MINUTES THAT DOES NOT HAVE TO GO
        //    BACK TO 0 AT THE BEGINNING OF THE DAY OR HOUR.
        Move (Integer(dlToday)*1440 + (Integer(slHH)*60) + Integer(slMM)) to idTime
    
        //--- WE NEED THE DAY OF THE WEEK. 1=SUNDAY, 2=MONDAY, ETC.
        Move (CurrentDateTime())       to dtVar
        Move (DateGetDayOfWeek(dtVar)) to ilTodayDay
    
        //--- CONDITIONS TO RUN THIS SECTION WHICH WILL BE ONCE A DAY EVERY DAY AT THE SPECIFIED TIME
        //    1 - HAS A TIME
        //    2 - NO DATE
    
        Clear CSAG337
        Move slTime to CSAG337.ACTION_TIME
        Find ge CSAG337 by 1
        While (Found)
            //Move (Left(CSAG337.PERIOD,1)) to ilMultiplier
            //Move (Mid(Trim(CSAG337.PERIOD), 1, 2)) to slPeriodType
            Move (Right(Trim(CSAG337.PERIOD),1)) to slPeriodType
            Move (Replace(slPeriodType,Trim(CSAG337.PERIOD),'')) to ilMultiplier
    
            //--- DAY CODE, SU, MO, ETC.
            //    DAY SPECIFIED IN THE SCHEDULE.
            If (slDay<>'') Move (f_Decode_Day(Self, Uppercase(slDay))) to ilSchedDay
    
            //--- IF ACTION DATE STOP WAS DEFINED, SO WE MUST VALIDATE IT.
            Move (Integer(CSAG337.ACTION_DATESTOP)=0) to ilRunIt
            If (not(ilRunIt)) Move (dlToday <= CSAG337.ACTION_DATESTOP) to ilRunIt
    
            //--- DO SOME ACTION
            If (ilRunIt and CSAG337.STATUS=1 ;
                        and Integer(CSAG337.ACTION_TIME) = Integer(slTime) ;
                        and Integer(CSAG337.ACTION_DATE) = 0 ;
                        and Integer(CSAG337.LAST_RUN) <> idTime) Begin
    
                    If (slDay='' or (slDay<>'' and ilSchedDay = ilTodayDay)) Begin
                       //--- CALL THE PROCEDURE THAT ACTUALLY DOES THE JOB
                       //Runprogram Background (Trim(CSAG337.CALL_MODULE))
                       Send p_ShellExecute (Trim(CSAG337.CALL_MODULE))
    
                       //--- WRITE THE CURRENT DATE/TIME BACK TO THE DATA FILE
                       Send p_Write_dTime idTime dDtLastRun sHrLastRun
                    End
            End
            Find Gt CSAG337 by 1
        Loop
    
        //--- CONDITIONS TO RUN THIS SECTION
        //    PERIODIC WITHOUT TIME - EVERY MINUTE OR TWO, ETC.
        Clear CSAG337
        Move 1 to CSAG337.PERIOD
        Find Ge CSAG337 by 3
        While (Found)
            Move (Right(Trim(CSAG337.PERIOD),1)) to slPeriodType
            Move (Replace(slPeriodType,Trim(CSAG337.PERIOD),'')) to ilMultiplier
    
            //Move (Left(CSAG337.PERIOD, 1)) to ilMultiplier
    
            //--- ONLY DO 2 CHARACTER PERIODS
            If (Length(Trim(CSAG337.PERIOD))>=2) Begin
                //Move (Right(Trim(CSAG337.PERIOD),1)) to slPeriodType
    
                //--- MINUTES FOR WHATEVER PERIOD 2D, 3W, ETC.
                Move ((f_Decode_Period(Self, slPeriodType))*ilMultiplier) to ilPeriod
    
                //--- DO SOME ACTION. USE OF DTIME HERE IS CRITICAL AS IT PREVENTS THE REPETITIVE CALLING
                //    OF THE PROCESS WITHIN THE SAME MINUTE.
                If (CSAG337.STATUS=1 and CSAG337.PERIOD<>'' and idTime >= (Integer(CSAG337.LAST_RUN)+ilPeriod)) Begin
    
                    //--- DEFAULT FALSE
                    Move 0 to ilRunIt
    
                    //--- IF ACTION DATE STOP WAS DEFINED, SO WE MUST VALIDATE IT.
                    Move (Integer(CSAG337.ACTION_DATESTOP)=0) to ilRunIt
                    If (not(ilRunIt)) Move (dlToday <= CSAG337.ACTION_DATESTOP) to ilRunIt
    
                    If (ilRunIt) Begin
                        //--- DEFAULT FALSE
                        Move 0 to ilRunIt
    
                        //--- IF DAILY OR WEEKLY, WE NEED TO SPECIFY A TIME OF DAY AS WELL
                        If (CSAG337.ACTION_TIME='') Move 1 to ilRunIt
                        Else If (Integer(slTime)>=Integer(CSAG337.ACTION_TIME)) Begin
                             //--- IF HAS ACTION TIME STOP, WE NEED VALIDATE IT.
                             If (CSAG337.ACTION_TIMESTOP='') Move 1 to ilRunIt
                             Else If (Integer(slTime)<=Integer(CSAG337.ACTION_TIMESTOP)) Move 1 to ilRunIt
                        End
    
                    End
    
                    If (ilRunIt) Begin
                        //--- CALL THE PROCESS
                        //Runprogram Background (Trim(CSAG337.CALL_MODULE))
                        Send p_ShellExecute (Trim(CSAG337.CALL_MODULE))
                        Send p_Write_dTime idTime dDtLastRun sHrLastRun
                    End
                End
            End
    
            Find Gt CSAG337 by 3
    
        Loop
    
    End_Procedure // OnProcess

    // this will perform an operation on a file (e.g. open) with the application
    // registered in the Windows Registry to open that type of file (via its extension)
    Procedure p_ShellExecute String sCallModule
          String sHostAddr 
          String sArgument
          Handle hInstance 
          Handle hWindowHandle
    
          Get Window_Handle to hWindowHandle
          // should be "OPEN" (it could also be "PRINT" etc).
          Move (shellexecute(hWindowHandle,'open',sCallModule, sArgument,0,0)) to hInstance
          //------------------------------
          If (hInstance <= 32) Begin
             Case Begin
                Case (hInstance = ERROR_FILE_NOT_FOUND)
                   Send Log_Status "The specified file was not found."
                   Case Break
                Case (hInstance = ERROR_PATH_NOT_FOUND)
                   Send Log_Status "The specified path was not found."
                   Case Break
                Case (hInstance = SE_ERR_ACCESSDENIED)
                   Send Log_Status "The operating system denied access to the specified file."
                   Case Break
                Case (hInstance = SE_ERR_OOM)
                   Send Log_Status "There was not enough memory to complete the operation."
                   Case Break
                Case (hInstance = ERROR_BAD_FORMAT)
                   Send Log_Status "The .exe file is invalid (non-Win32r .exe or error in .exe image)."
                   Case Break
                Case (hInstance = SE_ERR_SHARE)
                   Send Log_Status "A sharing violation occurred."
                   Case Break
                Case (hInstance = SE_ERR_ASSOCINCOMPLETE)
                   Send Log_Status "The file name association is incomplete or invalid."
                   Case Break
                Case (hInstance = SE_ERR_DDETIMEOUT)
                   Send Log_Status "The DDE transaction could not be completed because the request timed out."
                   Case Break
                Case (hInstance = SE_ERR_DDEFAIL)
                   Send Log_Status "The DDE transaction failed."
                   Case Break
                Case (hInstance = SE_ERR_DDEBUSY)
                   Send Log_Status "The DDE transaction could not be completed because other DDE transactions were being processed."
                   Case Break
                Case (hInstance = SE_ERR_NOASSOC)
                   Send Log_Status "There is no application associated with the given file name extension. This error will also be returned if you attempt to print a file that is not printable."
                   Case Break
                Case (hInstance = SE_ERR_DLLNOTFOUND)
                   Send Log_Status "The specified dynamic-link library was not found."
                   Case Break
                Case Else
                   Send Log_Status ("An unknown error appeared, errorcode=" * String (hInstance))
                   Case Break
             Case End
          End
         //---------------------
          
    End_Procedure // p_ShellExecute
    
    Function f_Decode_Period String slCode Returns Integer
        Move (Uppercase(slCode)) to slCode
    
        If (slCode='M') Function_Return 1
        If (slCode='H') Function_Return Hour_Length
        If (slCode='D') Function_Return Day_Length
        If (slCode='W') Function_Return (Week_Length*Day_Length)
    
    End_Function // f_Decode_Period
    
    Function f_Decode_Day String slDay Returns Integer
        Move (Uppercase(slDay)) to slDay
    
        If (slDay='SU') Function_Return 0
        If (slDay='MO') Function_Return 1
        If (slDay='TU') Function_Return 2
        If (slDay='WD') Function_Return 3
        If (slDay='TH') Function_Return 4
        If (slDay='FR') Function_Return 5
        If (slDay='SA') Function_Return 6
    
    End_Function// f_Decode_Day
    
    Procedure p_Write_dTime Integer idTime Date dDtLastRun String sHrLastRun
        Boolean bErro
    
        If (CSAG337.KILL_RECORD=1) Begin
            Send Request_Assign of oCSAG337_DD
            Send Request_Delete of oCSAG337_DD
        End
        Else Begin
            Send Request_Assign of oCSAG337_DD
            Set Field_Changed_Value of oCSAG337_DD Field CSAG337.LAST_RUN    to idTime
            Set Field_Changed_Value of oCSAG337_DD Field CSAG337.LAST_DT_RUN to dDtLastRun
            Set Field_Changed_Value of oCSAG337_DD Field CSAG337.LAST_HR_RUN to sHrLastRun
            Get Request_Validate of oCSAG337_DD to bErro
            If (not(bErro)) Send Request_Save of oCSAG337_DD
        End
    End_Procedure // p_Write_dTime
    
    Procedure p_Work_Loop
    
        While (1)
            Send DoProcess
            //---
            Sleep 1
        End
    
    End_Procedure // p_Work_Loop
    
    // Send p_Work_Loop
    

End_Object    // oWindowsService
