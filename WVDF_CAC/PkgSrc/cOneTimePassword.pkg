// File name  : cOneTimePassword.pkg                                          //
// File title : One Time Password (OTP) generator                             //
// Author(s)  : Ulbe Stellema, Eddy Kleinjan                                  //
//                                                                            //
// Confidential Trade Secret.                                                 //
// Copyright 1999 Data Access Corporation, Miami FL, USA                      //
// All Rights reserved                                                        //
// DataFlex is a registered trademark of Data Access Corporation.             //
//                                                                            //
// This package implements 
// - HOTP: an HMAC-Based One-Time Password Algorithm
// - TOTP: Time-Based One-Time Password Algorithm
// password RFC 6238 and RFC 4226
// https://tools.ietf.org/html/rfc4226
// https://tools.ietf.org/html/rfc6238
//
// Example:
//    Object oOneTimePassword is a cOneTimePassword
//    End_Object
//    
//    Function GetTOTP Returns String
//        Integer iOtp
//        Get TOTP of oOneTimePassword "12345678901234567890" to iOtp
//    End_Procedure
//    
//    
//
// $Rev History                                                               //
//                                                                            //
// US 2015-11-27 Initial version                                              //
// EK 2015-11-27 Integrated                                                   //
//****************************************************************************//

Use UI

Define otpDecodeNone     for 0
Define otpDecodeBase16   for 1
Define otpDecodeBase32   for 2
Define otpDecodeBase64   for 3

Define otpHmacSha1       for 160
Define otpHmacSha256     for 256
Define otpHmacSha512     for 512

//OATH_API LPCSTR Base16Encode(LPCSTR sString)
#IFNDEF get_otpBase16Encode
External_Function otpBase16Encode "Base16Encode" oath.dll ;
    Pointer sString ;
    Integer iLength ;
    Returns Address
#ENDIF

//OATH_API LPCSTR Base32Encode(LPCSTR sString)
#IFNDEF get_otpBase32Encode
External_Function otpBase32Encode "Base32Encode" oath.dll ;
    Pointer sString ;
    Integer iLength ;
    Returns Address
#ENDIF

// OATH_API int HOTP(LPCSTR sSecret, int decodetype, int bitcount, int counter)
#IFNDEF get_HOTP
External_Function HOTP "HOTP" oath.dll ;
    Pointer sSecret ;
    Integer iDecodeType ;
    Integer iDigitCount ;
    Pointer iCounter ;
    Returns Integer
#ENDIF
//-2WA
// OATH_API int TOTP(LPCSTR sSecret, int decodetype, int bitcount, int hmactype, int epoch, int Time, int step)
#IFNDEF get_TOTP
External_Function TOTP "TOTP" oath.dll ;
    Pointer sSecret ;
    Integer iDecodeType ;
    Integer iDigitCount ;
    Integer iHMACType ;
    Pointer iEpoch ;
    Pointer iTime ;
    Pointer iStep ;
    Returns Integer
#ENDIF

Class cOneTimePassword is a cObject
    
    Procedure Construct_Object
        Forward Send Construct_Object
        Property Integer piSecretCodeType otpDecodeNone // Default None; options otpDecodeBase16, otpDecodeBase32 or otpDecodeBase64
        Property Integer piDigitCount 6                 // Default = 6 bit; options 6, 7 or 8
        Property BigInt  piCounter  0                   // Default = 0
        Property Integer piHmacType otpHmacSha1         // Default = otpHmacSha1; options otpHmacSha1, otpHmacSha256, otpHmacSha512
        Property BigInt  piEpoch    0                   // Default = 0; options 0 or 1
        Property BigInt  piTime     0                   // Default = 0 (now); otherwise number of seconds since unix time
        // next 2 settings will define a 10-minute window
        Property BigInt  piStep     60                  // Default = 30 sec; step size for factor
        Property Integer piStepGraceCount 10             // Default = 2; Defines the maximum number of piSteps a code might fall outside the current time when validating
    End_Procedure // Construct_Object                  
    


    // Function : HOTP
    // Purpose  : HMAC-based One-time Password Algorithm
    Function HOTP String sSecret Returns String
        Integer iResult iDigitCount iType 
        BigInt iCounter
        Get piSecretCodeType to iType
        Get piDigitCount to iDigitCount
        Get piCounter to iCounter
        Move (HOTP(AddressOf(sSecret),iType,iDigitCount,AddressOf(iCounter))) to iResult
        Function_Return (Right("00000000" + String(iResult), iDigitCount))
    End_Function // HOTP
    


    // Function : TOTP
    // Purpose  : Time-based One-time Password Algorithm
    Function TOTP String sSecret Returns String
        Integer iType iResult iDigitCount iHMACType 
        BigInt iEpoch iTime iStep
        If (sSecret = "") Begin
            Error 999 "TOTP: There is no secret!"
            Function_Return ""
        End
        Get piSecretCodeType to iType
        Get piDigitCount to iDigitCount
        Get piHMACType to iHMACType
        Get piEpoch to iEpoch
        Get piTime to iTime
        Get piStep to iStep
        Move (TOTP(AddressOf(sSecret),iType,iDigitCount,iHMACType,AddressOf(iEpoch),AddressOf(iTime),AddressOf(iStep))) to iResult
        Function_Return (Right("00000000" + String(iResult), iDigitCount))
    End_Function // TOTP


    // Function : Base16Encode
    // Purpose  : Returns base16 encoded string
    Function Base16Encode String sInput Returns String
        String sResult
        Address pResult
        Boolean bOk
        Move (otpBase16Encode(AddressOf(sInput),Length(sInput))) to pResult
        Move pResult to sResult
        Move (Free(pResult)) to bOk
        Function_Return sResult
    End_Function // Base16Encode

    // Function : Base32Encode
    // Purpose  : Returns base32 encoded string
    Function Base32Encode String sInput Returns String
        String sResult
        Address pResult
        Boolean bOk
        Move (otpBase32Encode(AddressOf(sInput),Length(sInput))) to pResult
        Move pResult to sResult
        Move (Free(pResult)) to bOk
        Function_Return sResult
    End_Function // Base32Encode

    // Function : IsValidOneTimePassword
    // Purpose  : Validates the passed code based on the current time or time window
    Function IsValidTimeBasedOneTimePassword String sSecret String sCode Returns Boolean
        Boolean bIsValid
        Integer iStep iCount iOldEpoch
        String sCurrentCode
        
        Get piEpoch to iOldEpoch
        Set piEpoch to 0 // Make sure it's 0 when starting
        Get piStep to iStep
        
        // Get the current code
        Get TOTP sSecret to sCurrentCode
        If (sCode = sCurrentCode) Move True to bIsValid

        // If not valid, try validating next and previous steps
        While (not(bIsValid) and iCount < piStepGraceCount(Self))

            // Try previous time window
            Set piEpoch to (iStep * (iCount + 1))
            Get TOTP sSecret to sCurrentCode
            If (sCode = sCurrentCode) Begin
                Move True to bIsValid
            End
            Else Begin
                // Try next time window
                Set piEpoch to (iStep * (iCount + 1) * -1)
                Get TOTP sSecret to sCurrentCode
                If (sCode = sCurrentCode) Move True to bIsValid
            End

            Increment iCount

        Loop
        
        // Reset piEpoch
        Set piEpoch to iOldEpoch
        
        Function_Return bIsValid
        
    End_Function
    
    
    // Function : RandomBase32Secret
    // Purpose  : HMAC-based One-time Password Algorithm
    Function otpRandomBase32Secret Integer iSecretCodeType Integer iHmacType Returns String
        Integer i iLen iAlphabetLength
        String sSecret sFiller sAlphabet
        If (iSecretCodeType <> otpDecodeBase32) Begin
            Error 999 "Only BASE32 is implemented at this time."
            Function_Return ""
        End
        Move "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567" to sAlphabet
        Move (Length(sAlphabet)) to iAlphabetLength
        Case Begin
            Case (iHmacType = otpHmacSha1) 
                Move 32 to iLen
                Move "" to sFiller
                Case Break
            Case (iHmacType = otpHmacSha256) 
                Move 52 to iLen
                Move "====" to sFiller
                Case Break
            Case (iHmacType = otpHmacSha512) 
                Move 104 to iLen
                Move "=" to sFiller
                Case Break
        Case End
        For i from 1 to iLen
            Move (sSecret + Mid(sAlphabet, 1, Random(iAlphabetLength) + 1)) to sSecret
        Loop
        Move (sSecret + sFiller) to sSecret
        Function_Return sSecret
    End_Function
    
    
End_Class // cOATH

