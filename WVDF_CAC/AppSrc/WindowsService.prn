Compiling Program: C:\DataFlex Projects\CROSS\WVDF_CAC\AppSrc\WindowsService.src
Memory Available: 2147483646
1>//-2WA
1>Use DfAllEnt.pkg
Using pre-compiled package DFALLENT.PKG
Including file: dfallent.pkd    (C:\Program Files (x86)\DataFlex 18.2\Pkg\dfallent.pkd)
75323>
75323>// Project Object Structure
75323>//   oApplication is a cApplication
75323>
75323>Register_Object oApplication
75323>
75323>//  Set date attributes as needed
75323>Set_Date_Attribute SysDate4_State to True
75324>Set_Date_Attribute Date4_State    to True
75325>Set_Date_Attribute Epoch_Value    to 30
75326>
75326>Use Help_Ids.inc // Developer should provide this file of help context links.
Including file: Help_ids.inc    (C:\Program Files (x86)\DataFlex 18.2\Pkg\Help_ids.inc)
75326>>>// Help_ids.inc
75326>>>//
75326>>>// Context ids for the order entry system. This uses
75326>>>// help file ordentry.hlp.
75326>>>//
75326>>>// This is a sample version. YOU must supply
75326>>>// the ID values
75326>>>
75326>>>//  Generic Context Ids
75326>>>//
75326>>>
75326>>>// It is expected that file-names ids will be the same as their
75326>>>// filenumber.
75326>>>
75326>>>
75326>>>//  View and selection-list specific context ids
75326>>>//
75326>>>//..........add view, object, selection-list ids here....
75326>Use Std_Help.pkg
Including file: Std_help.pkg    (C:\Program Files (x86)\DataFlex 18.2\Pkg\Std_help.pkg)
75326>>>// STD_HELP.PKG
75326>>>//
75326>>>// Global Help Object
75326>>>//
75326>>>//  Creates all Help Support required to access WINDOWs help system
75326>>>//  with DataFlex. Creates a global object named Help_Object.
75326>>>//
75326>>>//  9/19/97 JJT - Modified to define stadnard help Ids if they are undefined
75326>>>
75326>>>use DFHlpSys.pkg // Context Sensitive Help Support for Windows and HTML
Including file: Dfhlpsys.pkg    (C:\Program Files (x86)\DataFlex 18.2\Pkg\Dfhlpsys.pkg)
75326>>>>>//************************************************************************
75326>>>>>//
75326>>>>>// Confidential Trade Secret.
75326>>>>>// Copyright (c) 1997-2002 Data Access Corporation, Miami Florida
75326>>>>>// as an unpublished work.  All rights reserved.
75326>>>>>// DataFlex is a registered trademark of Data Access Corporation.
75326>>>>>//
75326>>>>>//***********************************************************************/
75326>>>>>
75326>>>>>//************************************************************************
75326>>>>>// DFHlpSys.pkg
75326>>>>>//  12-07-1994 : Created
75326>>>>>//  8/29/2002  : major changes
75326>>>>>//
75326>>>>>// Author: John J. Tuohy
75326>>>>>//
75326>>>>>// This package loads support the windows help and html help. It used to define
75326>>>>>// a bunch of desktop help messages, but as of 8.3 those have been moved into
75326>>>>>// objects via a dfbase mixin. The only reason this package remains here is that
75326>>>>>// std_help.pkg calls it.
75326>>>>>//************************************************************************
75326>>>>>
75326>>>>>use DFHlpCl.pkg    // Define the Help_System Class for windows
Including file: Dfhlpcl.pkg    (C:\Program Files (x86)\DataFlex 18.2\Pkg\Dfhlpcl.pkg)
75326>>>>>>>//************************************************************************
75326>>>>>>>//
75326>>>>>>>// Confidential Trade Secret.
75326>>>>>>>// Copyright 1997-2001 Data Access Corporation, Miami FL, USA
75326>>>>>>>// All Rights reserved
75326>>>>>>>// DataFlex is a registered trademark of Data Access Corporation.
75326>>>>>>>//
75326>>>>>>>//************************************************************************
75326>>>>>>>//
75326>>>>>>>// $File name  : DFHlpCl.pkg
75326>>>>>>>// $File title : HelpSystem class support
75326>>>>>>>// Notice      :
75326>>>>>>>// $Author(s)  : John Tuohy
75326>>>>>>>//
75326>>>>>>>// $Rev History
75326>>>>>>>//
75326>>>>>>>// 07/19/01 SWB - added support for the Application object's psHelpFile
75326>>>>>>>//                to override any value in the global Workspace object
75326>>>>>>>// 11/17/97 JJT - added missing set help_filename method.
75326>>>>>>>// 10/15/97 JJT - changed define_symbol to define
75326>>>>>>>// 6/27/97  JJT - Modified low level help calls to work better in 95 help.
75326>>>>>>>// 07/23/96 JJT - New Class names
75326>>>>>>>// 01/27/96 JJT - Changed to from DAF to DF
75326>>>>>>>// 02/14/95 JJT - Added DFGSINI for 3.01/3.05 dual support of .ini name
75326>>>>>>>//                and section name.
75326>>>>>>>//************************************************************************
75326>>>>>>>// VDF8 changes
75326>>>>>>>// 10/23/2001 JJT - use ReadString instead of System_profile_string
75326>>>>>>>//************************************************************************
75326>>>>>>>
75326>>>>>>>// Help System Package
75326>>>>>>>//
75326>>>>>>>// Public Properties that should be set:
75326>>>>>>>//
75326>>>>>>>//     Property String  Help_Filename   (Help_File_Default(self))
75326>>>>>>>//     Property Integer Help_Id_General 0
75326>>>>>>>//     Property Integer Help_Id_Index   0
75326>>>>>>>//     Property Integer Help_Id_Keys    0
75326>>>>>>>//     Property Integer Help_Id_Files   0
75326>>>>>>>//     Property Integer Help_Id_Errors  0
75326>>>>>>>//
75326>>>>>>>//
75326>>>>>>>// Public messsages which are sent to this object:
75326>>>>>>>//
75326>>>>>>>//    procedure View_Context_KeyWord_Help integer Obj
75326>>>>>>>//    procedure View_Context_ID_Help      integer Obj
75326>>>>>>>//    procedure View_Context_Help         integer Obj
75326>>>>>>>//    procedure View_Help_for_help        integer Obj
75326>>>>>>>//    procedure View_help_index           integer Obj
75326>>>>>>>//    procedure View_Keys_Help            integer Obj
75326>>>>>>>//    procedure View_File_Help            integer Obj
75326>>>>>>>//    procedure View_Error_Help           integer Obj
75326>>>>>>>//    procedure View_Help_on_Topic        integer Obj
75326>>>>>>>//
75326>>>>>>>// Protected Messages:
75326>>>>>>>//        These messages invoke the Window's help system and are not
75326>>>>>>>//        directly sent by outside objects. They are sent by public
75326>>>>>>>//        "view_xxx" messages and might be used if you are creating
75326>>>>>>>//        a sub-class of an object-class.
75326>>>>>>>//
75326>>>>>>>//    Procedure Exec_System_Context_Help  integer Context_id
75326>>>>>>>//    Procedure Exec_System_Help          string  Keyword
75326>>>>>>>//    Procedure Exec_Context_Help         string  Context
75326>>>>>>>//
75326>>>>>>>//    Functions for converting DF help IDs to windows Help Ids
75326>>>>>>>//
75326>>>>>>>//        Any of these can return either a string or an integer.
75326>>>>>>>//
75326>>>>>>>//    Function System_Help_Context_id Integer ID Returns String
75326>>>>>>>//           Convert a DF help context id into a windows id. By default,
75326>>>>>>>//           just return the same value (a one to one match). This is called
75326>>>>>>>//           by View_Context_id_help and View_Context_Help
75326>>>>>>>//
75326>>>>>>>//    Function System_Help_File_Id Integer File# Integer Field# Returns String
75326>>>>>>>//           Convert file and field into a help id. By default it returns the
75326>>>>>>>//           file#. Called by View_File_Help.
75326>>>>>>>//
75326>>>>>>>//    Function System_Help_Error_id Integer Id Returns String
75326>>>>>>>//           Convert an error message into an ID. Right now it returns the
75326>>>>>>>//           the general error context id property, Help_id_errors. This
75326>>>>>>>//           will invoke general error help. If you want error support at the
75326>>>>>>>//           error# level you will have to determine the program to help
75326>>>>>>>//           interface yourself. Errors have a very large range and it is
75326>>>>>>>//           therefore hard to come up with an automatic numbering scheme.
75326>>>>>>>//           Called by View_Error_Help.
75326>>>>>>>
75326>>>>>>>
75326>>>>>>>Use Windows.pkg
75326>>>>>>>Use WinHlp.pkg // low level help call to windows API provides global message gDoWinHelp
75326>>>>>>>Use HelpSystemConstants.pkg // constants used by help system
75326>>>>>>>
75326>>>>>>>Register_Function phoWorkspace Returns Handle
75326>>>>>>>Register_function peHelpType  returns integer
75326>>>>>>>
75326>>>>>>>class HelpSystem is an cObject
75327>>>>>>>
75327>>>>>>>    register_function Help_File_Default returns string
75327>>>>>>>
75327>>>>>>>    procedure Construct_Object
75329>>>>>>>       Forward send Construct_Object
75331>>>>>>>
75331>>>>>>>       // Help file name only. If set, this overrides all other settings.
75331>>>>>>>       Property String psHelpFile
75332>>>>>>>
75332>>>>>>>       // Help_FileName
75332>>>>>>>       //   full path name of Help file. The default value grabs its value
75332>>>>>>>       //   from .ini or environment settings. See functiob Help_file_Default
75332>>>>>>>       //
75332>>>>>>>       Property String  Private.Help_Filename (Help_File_Default(self))
75333>>>>>>>
75333>>>>>>>       // The following properties are the default values for the help files
75333>>>>>>>       // IDs for the various subjects. Setting these requires an agreement
75333>>>>>>>       // between the DF help system and the help file.
75333>>>>>>>       //
75333>>>>>>>       Property Integer Help_Id_General  0
75334>>>>>>>       Property Integer Help_Id_Index    0
75335>>>>>>>       Property Integer Help_Id_Keys     0
75336>>>>>>>       Property Integer Help_Id_Files    0
75337>>>>>>>       Property Integer Help_Id_Errors   0
75338>>>>>>>
75338>>>>>>>       // this is now the default help object
75338>>>>>>>       Move self to Help_Object_id
75339>>>>>>>    End_Procedure
75340>>>>>>>
75340>>>>>>>   // New rules for VDF8:
75340>>>>>>>   // 1. If psHelpFile exists, find the file in the file path and use it
75340>>>>>>>   // 2. If application object exists and help type is windows, use psHelpFile from there, find in file path and use it.
75340>>>>>>>   // 3. If no help file exists, use thge old private help name (which gets the full name from the registry -only if no app object)
75340>>>>>>>   //    Last method is deprecated and only used for old applications
75340>>>>>>>   //
75340>>>>>>>   Function Help_filename returns string
75342>>>>>>>        string sHelpName
75342>>>>>>>        // If ghoWorkSpace Get Help_FileName of ghoWorkSpace to sHelpName // removed for VDF8
75342>>>>>>>
75342>>>>>>>        // If an Application object is used, take the name from there.
75342>>>>>>>        Get psHelpFile to sHelpName
75343>>>>>>>        If (sHelpName="" AND ghoApplication AND peHelpType(ghoApplication)=htWinHelp) Begin
75345>>>>>>>            Get psHelpFile of ghoApplication To sHelpName
75346>>>>>>>            //Move (psHelpPath(phoWorkspace(ghoApplication)) -"\" -sHelpName) To sHelpName
75346>>>>>>>        End
75346>>>>>>>>
75346>>>>>>>        If (sHelpName<>"") begin
75348>>>>>>>            Get_File_Path sHelpName To sHelpName
75349>>>>>>>            Function_Return sHelpName
75350>>>>>>>        end
75350>>>>>>>>
75350>>>>>>>        // if not set anywhere (and ideally it is) we use this.
75350>>>>>>>        Get Private.Help_FileName to sHelpName
75351>>>>>>>        Function_Return sHelpName
75352>>>>>>>    End_Function
75353>>>>>>>
75353>>>>>>>    Procedure Set Help_FileName string sName
75355>>>>>>>        Set Private.Help_FileName to sName
75356>>>>>>>    End_Procedure
75357>>>>>>>
75357>>>>>>>
75357>>>>>>>
75357>>>>>>>    // Consider this message PRIVATE in that it should only be changed
75357>>>>>>>    // by a sub-class and not an object. It is called in construct_object
75357>>>>>>>    // before it knows about object augmentations!!!!
75357>>>>>>>    //
75357>>>>>>>    //  Sets the Help_file_name by looking at the .INI file for:
75357>>>>>>>    //        HELP_DIR    - help directory (will check environment variable
75357>>>>>>>    //                      windir if not found - avoid this usage). If not
75357>>>>>>>    //                      blank append "\" as required.
75357>>>>>>>    //
75357>>>>>>>    //        HELP_FILE   - help file name. If blank uses the default help
75357>>>>>>>    //                      file name
75357>>>>>>>    //
75357>>>>>>>    Function Help_File_Default Returns String
75359>>>>>>>       String HelpFileDir HelpFileName sSubKey
75359>>>>>>>       // if using the application object we expect the help name to be
75359>>>>>>>       // defined in the application object or directly in the help object. No Exceptions
75359>>>>>>>       If (ghoApplication) function_return ""
75362>>>>>>>
75362>>>>>>>       // else if no application (and hence no WS) use an old deprecated method of checking
75362>>>>>>>       // for the module name in local_machine.
75362>>>>>>>       Get Module_name of Desktop to sSubKey
75363>>>>>>>       Get_Profile_String sSubKey HELP_DIR to HelpFileDir
75366>>>>>>>       Get_Profile_String sSubKey HELP_FILE to HelpFileName
75369>>>>>>>       // if dir exists, sure it has a "\" at the end. If no directory the
75369>>>>>>>       // dir must be blank so current directory is searched
75369>>>>>>>       If ( (HelpFileDir<>'') AND (Right(HelpFileDir,1)<>"\") ) ;          Move (HelpFileDir - '\') to HelpFileDir
75372>>>>>>>       If HelpFileName eq '' Move DEFAULT_HELP_FILENAME to HelpFileName
75375>>>>>>>       Function_Return (HelpFileDir - HelpFileName)
75376>>>>>>>    End_Function
75377>>>>>>>
75377>>>>>>>    // The System_Help_xxxx messages convert a DF help integer ID into
75377>>>>>>>    // a context value that can be used by the windows help system. If
75377>>>>>>>    // you return a number or a string. Numbers will get used for context ID
75377>>>>>>>    // help, non-numbers get used for keyword context help
75377>>>>>>>
75377>>>>>>>    // By default return ID passed. This creates a direct mapping between
75377>>>>>>>    // context IDs in your object and the context IDs in windows help.
75377>>>>>>>    //
75377>>>>>>>    Function System_Help_Context_id Integer ID Returns String
75379>>>>>>>       Function_Return ID
75380>>>>>>>    End_Function // System_Help_Context_id
75381>>>>>>>
75381>>>>>>>    // Returns the file# which assumes that we have a direct mapping between
75381>>>>>>>    // the file number and a window's help context_id. We are ignoring field#
75381>>>>>>>    // in this case (although your augmentation would not have to). If the
75381>>>>>>>    // file# is 0, return a the HELP_ID context id.
75381>>>>>>>    //
75381>>>>>>>    Function System_Help_File_Id Integer File# Integer Field# Returns String
75383>>>>>>>       String rVal
75383>>>>>>>       if File# eq 0 Move (Help_id_files(self)) to rVal
75386>>>>>>>       Else Move File# to rVal
75388>>>>>>>       Function_Return Rval
75389>>>>>>>    End_Function // System_Help_File_id
75390>>>>>>>
75390>>>>>>>    // Convert an error id into a help context id. Return the general
75390>>>>>>>    // Help id property value. We do this because error number have
75390>>>>>>>    // a rather large range (1-9000) and just using the number would consume
75390>>>>>>>    // too much of the context id space.
75390>>>>>>>    //
75390>>>>>>>    Function System_Help_Error_id Integer Id Returns String
75392>>>>>>>       Function_Return (Help_Id_Errors(self))
75393>>>>>>>    End_Function // System_Help_Error_id
75394>>>>>>>
75394>>>>>>>    // Use this if you want your help context to be keyword based
75394>>>>>>>    //
75394>>>>>>>    procedure View_Context_KeyWord_Help integer Obj
75396>>>>>>>       String Context
75396>>>>>>>       If Obj gt 0 ;          Get Help_Context of obj HELP_CONTEXT_KEYWORD to Context
75399>>>>>>>       Send Exec_System_Help Context
75400>>>>>>>    end_procedure
75401>>>>>>>
75401>>>>>>>    // Use this if you want your help context to be ID based
75401>>>>>>>    //
75401>>>>>>>    procedure View_Context_ID_Help integer Obj
75403>>>>>>>       Integer Context_ID
75403>>>>>>>       String Context
75403>>>>>>>       If Obj gt 0 ;          Get Help_Context of Obj HELP_CONTEXT_ID to Context_ID
75406>>>>>>>       Get System_Help_Context_id Context_Id to Context
75407>>>>>>>       Send Exec_Context_Help Context
75408>>>>>>>    end_procedure
75409>>>>>>>
75409>>>>>>>    // Use this is you want the object requesting help to support either
75409>>>>>>>    // keyword or context ID help (it will use whatever it finds first).
75409>>>>>>>    //
75409>>>>>>>    procedure View_Context_Help integer Obj
75411>>>>>>>       String Context
75411>>>>>>>       If Obj gt 0 ;          Get Help_Context of obj HELP_CONTEXT_ID_OR_KEY to Context
75414>>>>>>>       if (left(context,1)) in '0123456789' ;          Get System_Help_Context_id Context to Context
75417>>>>>>>       Send Exec_Context_Help Context
75418>>>>>>>    end_procedure
75419>>>>>>>
75419>>>>>>>    Procedure View_Help_for_Help Integer obj
75421>>>>>>>        Send Exec_System_Help HELP_FOR_HELP_STRING
75422>>>>>>>    end_procedure
75423>>>>>>>
75423>>>>>>>    Procedure View_Help_Index integer obj
75425>>>>>>>       Send Exec_Context_Help (Help_id_index(self))
75426>>>>>>>    End_Procedure // View_help_index
75427>>>>>>>
75427>>>>>>>    procedure View_Keys_Help Integer Obj
75429>>>>>>>        Send Exec_Context_Help (Help_id_keys(self))
75430>>>>>>>    end_procedure
75431>>>>>>>
75431>>>>>>>    Procedure View_File_Help Integer Obj
75433>>>>>>>       String Context FilFld
75433>>>>>>>       Integer File# Field# Dot
75433>>>>>>>       If Obj gt 0 Begin
75435>>>>>>>          // This should return the file and field as a string in
75435>>>>>>>          // FFF.fff format (F=File, f=format).
75435>>>>>>>          Get Help_Context of Obj HELP_CONTEXT_DATAFILE to FilFld
75436>>>>>>>          // Parse FilFld into File# and Field#.
75436>>>>>>>          Pos '.' in FilFld to Dot
75438>>>>>>>>
75438>>>>>>>          if Dot ne 0 begin
75440>>>>>>>             Left FilFld to File#  (dot-1)
75442>>>>>>>>
75442>>>>>>>             Mid  FilFld to Field# 255 (dot+1)
75445>>>>>>>>
75445>>>>>>>          End
75445>>>>>>>>
75445>>>>>>>       End
75445>>>>>>>>
75445>>>>>>>       Get System_Help_File_id File# Field# to Context
75446>>>>>>>       Send Exec_Context_Help Context
75447>>>>>>>    End_Procedure // View_File_Help
75448>>>>>>>
75448>>>>>>>    //  View help on an error. Current version uses context id help.
75448>>>>>>>    //  The error number should be in global integer last_err
75448>>>>>>>    //
75448>>>>>>>    procedure View_Error_Help Integer Obj
75450>>>>>>>        String Context
75450>>>>>>>        If Obj gt 0 ;           Get Help_Context of obj HELP_CONTEXT_ERROR to Context
75453>>>>>>>        if (left(context,1)) in '0123456789' ;           Get System_Help_Error_id Context to Context
75456>>>>>>>        Send Exec_Context_Help Context
75457>>>>>>>    end_procedure
75458>>>>>>>
75458>>>>>>>    // View list of help topics.
75458>>>>>>>    //
75458>>>>>>>    Procedure View_Help_on_Topic Integer obj
75460>>>>>>>        Send Exec_System_Help HELP_ON_TOPIC_STRING
75461>>>>>>>    end_procedure
75462>>>>>>>
75462>>>>>>>    // Request context help. If context is a number assume that it is
75462>>>>>>>    // context id help, else assume it is keyword help.
75462>>>>>>>    //
75462>>>>>>>    Procedure Exec_Context_Help string Context
75464>>>>>>>       if (left(context,1)) in '0123456789' ;    // if first character is a          Send Exec_System_Context_Help Context  // numeric we assume ID help
75467>>>>>>>       else ;                                    // otherwise we assume key-          Send Exec_System_Help Context          // word help.
75469>>>>>>>    End_Procedure // Exec_Context_Help
75470>>>>>>>
75470>>>>>>>    // NOTE: the following two messages are the only messages that directly make calls
75470>>>>>>>    //       to the windows API. This is important. These two messages could be changed
75470>>>>>>>    //       to call other help systems (e.g. HTML help) and the rest of the high level
75470>>>>>>>    //       program remains the same. These are the only two messages that are
75470>>>>>>>    //       expected to be windows help centric.
75470>>>>>>>
75470>>>>>>>    // Get Context Id help for passed ID. Use help file as defined
75470>>>>>>>    // in Help_filename. If id is 0 use general help id (which must be
75470>>>>>>>    // defined.
75470>>>>>>>    //
75470>>>>>>>    Procedure Exec_System_Context_Help integer Context_id
75472>>>>>>>        If Context_Id eq 0 ; // if zero, see if we have a contents page            Move (Help_Id_General(self)) to Context_id
75475>>>>>>>        If Context_Id eq 0 ; // if still zero, jump to the topics popup dialog            Send Exec_System_Help HELP_ON_TOPIC_STRING
75478>>>>>>>        Else ;            Send gDoWinHelp WH_INTCONTEXT (Help_Filename(self)) Context_Id
75480>>>>>>>    end_procedure
75481>>>>>>>
75481>>>>>>>    // Get keyword help for passed keyword. Use help file as defined
75481>>>>>>>    // in help_filename.
75481>>>>>>>    //
75481>>>>>>>    procedure Exec_System_Help string Keyword
75483>>>>>>>        If Keyword eq HELP_FOR_HELP_STRING ;            Send gDoWinHelp WH_HELPONHELP
75486>>>>>>>        else if (Keyword eq HELP_ON_TOPIC_STRING OR KeyWord="");            Send gDoWinHelp WH_FINDER (Help_Filename(self))
75490>>>>>>>        else ;            Send gDoWinHelp WH_STRINGCONTEXT (Help_Filename(self)) KeyWord
75492>>>>>>>    end_procedure
75493>>>>>>>
75493>>>>>>>end_class
75494>>>>>use cHtmlHelp.pkg //  Define the help class for Html
75494>>>
75494>>>
75494>>>// This file needs to be provided by the developer. It will contain
75494>>>// symbolic replacements for the ID integer values used to access the
75494>>>// the windows help file's topics.
75494>>>//
75494>>>use Help_ids.inc
75494>>>
75494>>>// If the following are not defined in help_ids.inc,
75494>>>//  create default 0 values for them
75494>>>Define GeneralHelpId    for    0
75494>>>Define KeysHelpId       for    0
75494>>>Define FileHelpId       for    0
75494>>>Define ErrorHelpId      for    0  // probably not used in VDF
75494>>>Define IndexHelpId      for    0  // probably not used in VDF
75494>>>
75494>>>object Help_Object is a HelpSystem // global windows HLP help object
75496>>>
75496>>>   Set Help_Id_General to GeneralHelpId    // these should all be defined
75497>>>   Set Help_Id_Index   to IndexHelpId      // in help_ids.inc.
75498>>>   Set Help_Id_Keys    to KeysHelpId       //
75499>>>   Set Help_Id_Files   to FileHelpId       //
75500>>>   Set Help_Id_Errors  to ErrorHelpId      //
75501>>>
75501>>>end_object
75502>>>
75502>>>Object oHtmlHelp is a cHtmlHelp // this also defines ghoHtmlHelp
75504>>>End_Object
75505>
75505>// use an application object to make your program workspace aware.
75505>
75505>Use cApplication.pkg
75505>
75505>Object oApplication is a cApplication
75507>End_Object    // oApplication
75508>
75508>Use WindowsService.bp
Including file: WindowsService.bp    (C:\DataFlex Projects\CROSS\WVDF_CAC\PkgSrc\WindowsService.bp)
75508>>>//-2WA
75508>>>// Register all objects
75508>>>Register_Object oCSAG337_DD
75508>>>Register_Object oWindowsService
75508>>>
75508>>>
75508>>>Register_Function  f_Decode_Period String slCode Returns Integer
75508>>>Register_Function  f_Decode_Day String slDay Returns Integer
75508>>>Register_Procedure p_Write_dTime Integer idTime Date dDtLastRun String sHrLastRun
75508>>>
75508>>>Define Week_Length for |CI7
75508>>>Define Day_Length  for |CI1440
75508>>>Define Hour_Length for |CI60
75508>>>
75508>>>Define ERROR_FILE_NOT_FOUND for 2 // The specified file was not found.
75508>>>Define SE_ERR_FNF for 2 // The specified file was not found.
75508>>>Define SE_ERR_PNF for 3 // The specified path was not found.
75508>>>Define ERROR_PATH_NOT_FOUND for 3 // The specified path was not found.
75508>>>Define SE_ERR_ACCESSDENIED for 5 // The operating system denied access to the specified file.
75508>>>Define SE_ERR_OOM for 8 // There was not enough memory to complete the operation.
75508>>>Define ERROR_BAD_FORMAT for 11 // The .exe file is invalid (non-Win32r .exe or error in .exe image).
75508>>>Define SE_ERR_SHARE for 26 // A sharing violation occurred.
75508>>>Define SE_ERR_ASSOCINCOMPLETE for 27 // The file name association is incomplete or invalid.
75508>>>Define SE_ERR_DDETIMEOUT for 28 // The DDE transaction could not be completed because the request timed out.
75508>>>Define SE_ERR_DDEFAIL for 29 // The DDE transaction failed.
75508>>>Define SE_ERR_DDEBUSY for 30 // The DDE transaction could not be completed because other DDE transactions were being processed.
75508>>>Define SE_ERR_NOASSOC for 31 // There is no application associated with the given file name extension. This error will also be returned if you attempt to print a file that is not printable.
75508>>>Define SE_ERR_DLLNOTFOUND for 32 // The specified dynamic-link library was not found.
75508>>>
75508>>>// external function call used in Procedure DoStartDocument
75508>>>External_Function ShellExecute "ShellExecuteA" shell32.dll ;   Handle hWnd ;   String lpOperation ;   String lpFile ;   String lpParameters ;   String lpDirectory ;   DWord iShowCmd ;   Returns Handle
75509>>>
75509>>>   
75509>>>Open CSAG337
Including file: CSAG337.fd    (C:\DataFlex Projects\CROSS\WVDF_CAC\DDSrc\CSAG337.fd)
75511>>>
75511>>>
75511>>>Use BatchDD.pkg
75511>>>Use statALog.pkg
Including file: statALog.pkg    (C:\Program Files (x86)\DataFlex 18.2\Pkg\statALog.pkg)
75511>>>>>//************************************************************************
75511>>>>>// Confidential Trade Secret.
75511>>>>>// Copyright (c) 1997 Data Access Corporation, Miami Florida
75511>>>>>// as an unpublished work.  All rights reserved.
75511>>>>>// DataFlex is a registered trademark of Data Access Corporation.
75511>>>>>//
75511>>>>>//****************************************************************************//
75511>>>>>//                                                                            //
75511>>>>>// $File name  : StatALog.Log                                                 //
75511>>>>>// $File title : StatusAsciiLog class                                         //
75511>>>>>// Notice      :                                                              //
75511>>>>>// $Author(s)  : John Tuohy                                                   //
75511>>>>>//                                                                            //
75511>>>>>// $Rev History                                                               //
75511>>>>>//                                                                            //
75511>>>>>// MG 10/2/98    Changed error_report with additional parameter               //
75511>>>>>// JT 07/03/97   File created                                                 //
75511>>>>>//****************************************************************************//
75511>>>>>
75511>>>>>
75511>>>>>// Class: StatusAsciiLog
75511>>>>>//
75511>>>>>// This is a prototype status log file that can be used for adding status
75511>>>>>// log entries. This uses an ascii file to write the log values. For this
75511>>>>>// reason THIS IS NOT A MULTI-USER solution. This package is handy if you
75511>>>>>// want to test your programs without using a database file.
75511>>>>>//
75511>>>>>// Public Interface:
75511>>>>>//      Send Log_Status String sText
75511>>>>>//              Creates a log entry. Passes string Text.
75511>>>>>//      Send Log_Clear
75511>>>>>//              Clears the status log datafile.
75511>>>>>//
75511>>>>>//  Properties to be set within the object
75511>>>>>//     Set Close_Always_State to True|False (False dflt)
75511>>>>>//              If true the ascii file will be closed after each
75511>>>>>//              entry. Only use this if your program is crashing
75511>>>>>//              and you are losing log data.
75511>>>>>//      Set Log_Channel to iChannel (deflt-8)
75511>>>>>//              IO channel to use for the ascii file.
75511>>>>>//      Set Log_Name to sFilePathName  (dflt=".\dflog.txt)
75511>>>>>//              Name of log data file
75511>>>>>Use VDFBase.pkg
75511>>>>>
75511>>>>>Class StatusAsciiLog is a cObject
75512>>>>>
75512>>>>>   Procedure Construct_Object
75514>>>>>      Forward Send Construct_Object
75516>>>>>      Property Integer Close_Always_State  False
75517>>>>>      Property Integer Log_Channel         8
75518>>>>>      Property String  Log_Name            '.\DFLog.txt'
75519>>>>>      Property Integer Log_Opened_State    False
75520>>>>>   End_Procedure
75521>>>>>
75521>>>>>   // Clear the log file - Public message
75521>>>>>   Procedure Log_Clear
75523>>>>>        Integer LogChannel
75523>>>>>        Get Log_Channel to LogChannel
75524>>>>>        Send Close_Log
75525>>>>>        Direct_Output channel LogChannel (Log_Name(self))
75527>>>>>        Close_outPut channel LogChannel
75529>>>>>   End_Procedure
75530>>>>>
75530>>>>>   // Private: converts integers Hour and Minutes into "HH:MM" string
75530>>>>>   Function TimeString integer iHr integer iMn returns String
75532>>>>>        Function_return (right("0"+string(iHr),2) + ":" + right("0"+string(iMn),2))
75533>>>>>   End_Function
75534>>>>>
75534>>>>>   // write a log status record. Pass Text to write
75534>>>>>   Procedure Log_Status string Txt
75536>>>>>      Integer Hr Mn
75536>>>>>      Date    Dt
75536>>>>>      Integer LogChannel
75536>>>>>      Integer OldError
75536>>>>>      Move Error_Object_ID to OldError
75537>>>>>      Move self to Error_Object_Id
75538>>>>>      Sysdate4 Dt Hr Mn
75541>>>>>      If not (Log_Opened_State(self)) Send Open_Log
75544>>>>>      Get Log_Channel to LogChannel
75545>>>>>      WriteLn Channel LogChannel Dt " " (TimeString(self,hr,Mn)) " - "Txt
75552>>>>>      If (Close_Always_State(self)) ;              Send Close_Log
75555>>>>>      Move OldError to Error_Object_Id
75556>>>>>   End_Procedure // Log_Status
75557>>>>>
75557>>>>>   // private: Close_log
75557>>>>>   Procedure Close_Log
75559>>>>>      Integer LogChannel
75559>>>>>      If (Log_Opened_State(self)) Begin
75561>>>>>          Get Log_Channel to LogChannel
75562>>>>>          Close_outPut Channel LogChannel
75564>>>>>          Set Log_Opened_State to False
75565>>>>>      End
75565>>>>>>
75565>>>>>   End_Procedure
75566>>>>>
75566>>>>>    // private: Open_log
75566>>>>>   Procedure Open_Log
75568>>>>>      Integer LogChannel
75568>>>>>      If not (Log_Opened_State(self)) Begin
75570>>>>>          Get Log_Channel to LogChannel
75571>>>>>          Append_Output channel LogChannel (Log_Name(self))
75573>>>>>          Set Log_Opened_State to True
75574>>>>>      End
75574>>>>>>
75574>>>>>   End_Procedure
75575>>>>>
75575>>>>>   // When errors occur within object, they are directed here.
75575>>>>>   Procedure Error_Report integer iErrNum integer iErrLine string ErrMsg
75577>>>>>     send Error_Report of desktop iErrNum iErrLine ErrMsg
75578>>>>>     //Forward send Error_Report iErrNum iErrLine ErrMsg
75578>>>>>   End_procedure
75579>>>>>
75579>>>>>End_Class
75580>>>>>
75580>>>>>// expected usage
75580>>>>>//Object Status_Log is a StatusAsciiLog
75580>>>>>//      Set Log_Channel to xx
75580>>>>>//      Set Log_Name    to "xx"
75580>>>>>//End_Object
75580>>>
75580>>>Object oStatus_Log is a StatusAsciiLog
75582>>>    Set Log_Channel to 7
75583>>>    Set Log_Name    to ".\WindowsService.log"
75584>>>End_Object // oStatus_Log
75585>>>
75585>>>
75585>>>
75585>>>Object oWindowsService is a BusinessProcess
75587>>>
75587>>>    
75587>>>        Object oCSAG337_DD is a DataDictionary
75589>>>            Set Main_File to CSAG337.FILE_NUMBER
75590>>>    
75590>>>            Send DefineAllExtendedFields
75591>>>    
75591>>>        End_Object // oCSAG337_DD
75592>>>    
75592>>>    Set Status_Panel_State to FALSE
75593>>>    Set Status_Log_State to False
75594>>>    Set Status_Log_Id to oStatus_Log
75595>>>
75595>>>    // Send DoProcess to this BPO to start the business process
75595>>>    // DoProcess is a predefined method in the BusinessProcess class
75595>>>    // Send DoProcess of oNewBusinessProcess
75595>>>    
75595>>>    // OnProcess
75595>>>    // ---------
75595>>>    // Place your processing code into Procedure OnProcess
75595>>>    // OnProcess is a predefined method in the BusinessProcess class
75595>>>    
75595>>>    Procedure OnProcess
75598>>>        Date     dlToday
75598>>>        Integer  idTime
75598>>>        Integer  ilMultiplier
75598>>>        Integer  ilPeriod
75598>>>        Integer  iPeriodoItself
75598>>>        Integer  ilRunIt
75598>>>        Integer  ilTodayDay
75598>>>        Integer  ilSchedDay
75598>>>        String   slHH
75598>>>        String   slMM
75598>>>        String   slTime
75598>>>        String   sTransaction
75598>>>        String   slPeriodType
75598>>>        String   slDay
75598>>>        String   slModuleld
75598>>>        DateTime dtVar
75598>>>        Date     dDtLastRun
75598>>>        String   sHrLastRun
75598>>>    
75598>>>        Sysdate dlToday slHH slMM
75601>>>    
75601>>>        If (Integer(slMM)<10) Move (Insert('0', slMM, 1)) to slMM
75604>>>        If (Integer(slHH)<10) Move (Insert('0', slHH, 1)) to slHH
75607>>>    
75607>>>        Move (slHH + slMM) to slTime
75608>>>    
75608>>>        Move dlToday           to dDtLastRun
75609>>>        Move (slHH +':'+ slMM) to sHrLastRun
75610>>>    
75610>>>        //--- WE NEED AN INTEGER TO REPRESENT THE TIME OF DAY TO ELIMINATE CROSS MIDNIGHT PROBLEMS.
75610>>>        //    WE CREATED A SINGLE INTEGER FROM THE DATE, HOUR AND MINUTES THAT DOES NOT HAVE TO GO
75610>>>        //    BACK TO 0 AT THE BEGINNING OF THE DAY OR HOUR.
75610>>>        Move (Integer(dlToday)*1440 + (Integer(slHH)*60) + Integer(slMM)) to idTime
75611>>>    
75611>>>        //--- WE NEED THE DAY OF THE WEEK. 1=SUNDAY, 2=MONDAY, ETC.
75611>>>        Move (CurrentDateTime())       to dtVar
75612>>>        Move (DateGetDayOfWeek(dtVar)) to ilTodayDay
75613>>>    
75613>>>        //--- CONDITIONS TO RUN THIS SECTION WHICH WILL BE ONCE A DAY EVERY DAY AT THE SPECIFIED TIME
75613>>>        //    1 - HAS A TIME
75613>>>        //    2 - NO DATE
75613>>>    
75613>>>        Clear CSAG337
75614>>>        Move slTime to CSAG337.ACTION_TIME
75615>>>        Find ge CSAG337 by 1
75616>>>>
75616>>>        While (Found)
75620>>>            //Move (Left(CSAG337.PERIOD,1)) to ilMultiplier
75620>>>            //Move (Mid(Trim(CSAG337.PERIOD), 1, 2)) to slPeriodType
75620>>>            Move (Right(Trim(CSAG337.PERIOD),1)) to slPeriodType
75621>>>            Move (Replace(slPeriodType,Trim(CSAG337.PERIOD),'')) to ilMultiplier
75622>>>    
75622>>>            //--- DAY CODE, SU, MO, ETC.
75622>>>            //    DAY SPECIFIED IN THE SCHEDULE.
75622>>>            If (slDay<>'') Move (f_Decode_Day(Self, Uppercase(slDay))) to ilSchedDay
75625>>>    
75625>>>            //--- IF ACTION DATE STOP WAS DEFINED, SO WE MUST VALIDATE IT.
75625>>>            Move (Integer(CSAG337.ACTION_DATESTOP)=0) to ilRunIt
75626>>>            If (not(ilRunIt)) Move (dlToday <= CSAG337.ACTION_DATESTOP) to ilRunIt
75629>>>    
75629>>>            //--- DO SOME ACTION
75629>>>            If (ilRunIt and CSAG337.STATUS=1 ;                        and Integer(CSAG337.ACTION_TIME) = Integer(slTime) ;                        and Integer(CSAG337.ACTION_DATE) = 0 ;                        and Integer(CSAG337.LAST_RUN) <> idTime) Begin
75631>>>    
75631>>>                    If (slDay='' or (slDay<>'' and ilSchedDay = ilTodayDay)) Begin
75633>>>                       //--- CALL THE PROCEDURE THAT ACTUALLY DOES THE JOB
75633>>>                       //Runprogram Background (Trim(CSAG337.CALL_MODULE))
75633>>>                       Send p_ShellExecute (Trim(CSAG337.CALL_MODULE))
75634>>>    
75634>>>                       //--- WRITE THE CURRENT DATE/TIME BACK TO THE DATA FILE
75634>>>                       Send p_Write_dTime idTime dDtLastRun sHrLastRun
75635>>>                    End
75635>>>>
75635>>>            End
75635>>>>
75635>>>            Find Gt CSAG337 by 1
75636>>>>
75636>>>        Loop
75637>>>>
75637>>>    
75637>>>        //--- CONDITIONS TO RUN THIS SECTION
75637>>>        //    PERIODIC WITHOUT TIME - EVERY MINUTE OR TWO, ETC.
75637>>>        Clear CSAG337
75638>>>        Move 1 to CSAG337.PERIOD
75639>>>        Find Ge CSAG337 by 3
75640>>>>
75640>>>        While (Found)
75644>>>            Move (Right(Trim(CSAG337.PERIOD),1)) to slPeriodType
75645>>>            Move (Replace(slPeriodType,Trim(CSAG337.PERIOD),'')) to ilMultiplier
75646>>>    
75646>>>            //Move (Left(CSAG337.PERIOD, 1)) to ilMultiplier
75646>>>    
75646>>>            //--- ONLY DO 2 CHARACTER PERIODS
75646>>>            If (Length(Trim(CSAG337.PERIOD))>=2) Begin
75648>>>                //Move (Right(Trim(CSAG337.PERIOD),1)) to slPeriodType
75648>>>    
75648>>>                //--- MINUTES FOR WHATEVER PERIOD 2D, 3W, ETC.
75648>>>                Move ((f_Decode_Period(Self, slPeriodType))*ilMultiplier) to ilPeriod
75649>>>    
75649>>>                //--- DO SOME ACTION. USE OF DTIME HERE IS CRITICAL AS IT PREVENTS THE REPETITIVE CALLING
75649>>>                //    OF THE PROCESS WITHIN THE SAME MINUTE.
75649>>>                If (CSAG337.STATUS=1 and CSAG337.PERIOD<>'' and idTime >= (Integer(CSAG337.LAST_RUN)+ilPeriod)) Begin
75651>>>    
75651>>>                    //--- DEFAULT FALSE
75651>>>                    Move 0 to ilRunIt
75652>>>    
75652>>>                    //--- IF ACTION DATE STOP WAS DEFINED, SO WE MUST VALIDATE IT.
75652>>>                    Move (Integer(CSAG337.ACTION_DATESTOP)=0) to ilRunIt
75653>>>                    If (not(ilRunIt)) Move (dlToday <= CSAG337.ACTION_DATESTOP) to ilRunIt
75656>>>    
75656>>>                    If (ilRunIt) Begin
75658>>>                        //--- DEFAULT FALSE
75658>>>                        Move 0 to ilRunIt
75659>>>    
75659>>>                        //--- IF DAILY OR WEEKLY, WE NEED TO SPECIFY A TIME OF DAY AS WELL
75659>>>                        If (CSAG337.ACTION_TIME='') Move 1 to ilRunIt
75662>>>                        Else If (Integer(slTime)>=Integer(CSAG337.ACTION_TIME)) Begin
75665>>>                             //--- IF HAS ACTION TIME STOP, WE NEED VALIDATE IT.
75665>>>                             If (CSAG337.ACTION_TIMESTOP='') Move 1 to ilRunIt
75668>>>                             Else If (Integer(slTime)<=Integer(CSAG337.ACTION_TIMESTOP)) Move 1 to ilRunIt
75672>>>                        End
75672>>>>
75672>>>    
75672>>>                    End
75672>>>>
75672>>>    
75672>>>                    If (ilRunIt) Begin
75674>>>                        //--- CALL THE PROCESS
75674>>>                        //Runprogram Background (Trim(CSAG337.CALL_MODULE))
75674>>>                        Send p_ShellExecute (Trim(CSAG337.CALL_MODULE))
75675>>>                        Send p_Write_dTime idTime dDtLastRun sHrLastRun
75676>>>                    End
75676>>>>
75676>>>                End
75676>>>>
75676>>>            End
75676>>>>
75676>>>    
75676>>>            Find Gt CSAG337 by 3
75677>>>>
75677>>>    
75677>>>        Loop
75678>>>>
75678>>>    
75678>>>    End_Procedure // OnProcess
75679>>>
75679>>>    // this will perform an operation on a file (e.g. open) with the application
75679>>>    // registered in the Windows Registry to open that type of file (via its extension)
75679>>>    Procedure p_ShellExecute String sCallModule
75682>>>          String sHostAddr 
75682>>>          String sArgument
75682>>>          Handle hInstance 
75682>>>          Handle hWindowHandle
75682>>>    
75682>>>          Get Window_Handle to hWindowHandle
75683>>>          // should be "OPEN" (it could also be "PRINT" etc).
75683>>>          Move (shellexecute(hWindowHandle,'open',sCallModule, sArgument,0,0)) to hInstance
75684>>>          //------------------------------
75684>>>          If (hInstance <= 32) Begin
75686>>>             Case Begin
75686>>>                Case (hInstance = ERROR_FILE_NOT_FOUND)
75688>>>                   Send Log_Status "The specified file was not found."
75689>>>                   Case Break
75690>>>                Case (hInstance = ERROR_PATH_NOT_FOUND)
75693>>>                   Send Log_Status "The specified path was not found."
75694>>>                   Case Break
75695>>>                Case (hInstance = SE_ERR_ACCESSDENIED)
75698>>>                   Send Log_Status "The operating system denied access to the specified file."
75699>>>                   Case Break
75700>>>                Case (hInstance = SE_ERR_OOM)
75703>>>                   Send Log_Status "There was not enough memory to complete the operation."
75704>>>                   Case Break
75705>>>                Case (hInstance = ERROR_BAD_FORMAT)
75708>>>                   Send Log_Status "The .exe file is invalid (non-Win32r .exe or error in .exe image)."
75709>>>                   Case Break
75710>>>                Case (hInstance = SE_ERR_SHARE)
75713>>>                   Send Log_Status "A sharing violation occurred."
75714>>>                   Case Break
75715>>>                Case (hInstance = SE_ERR_ASSOCINCOMPLETE)
75718>>>                   Send Log_Status "The file name association is incomplete or invalid."
75719>>>                   Case Break
75720>>>                Case (hInstance = SE_ERR_DDETIMEOUT)
75723>>>                   Send Log_Status "The DDE transaction could not be completed because the request timed out."
75724>>>                   Case Break
75725>>>                Case (hInstance = SE_ERR_DDEFAIL)
75728>>>                   Send Log_Status "The DDE transaction failed."
75729>>>                   Case Break
75730>>>                Case (hInstance = SE_ERR_DDEBUSY)
75733>>>                   Send Log_Status "The DDE transaction could not be completed because other DDE transactions were being processed."
75734>>>                   Case Break
75735>>>                Case (hInstance = SE_ERR_NOASSOC)
75738>>>                   Send Log_Status "There is no application associated with the given file name extension. This error will also be returned if you attempt to print a file that is not printable."
75739>>>                   Case Break
75740>>>                Case (hInstance = SE_ERR_DLLNOTFOUND)
75743>>>                   Send Log_Status "The specified dynamic-link library was not found."
75744>>>                   Case Break
75745>>>                Case Else
75745>>>                   Send Log_Status ("An unknown error appeared, errorcode=" * String (hInstance))
75746>>>                   Case Break
75747>>>             Case End
75747>>>          End
75747>>>>
75747>>>         //---------------------
75747>>>          
75747>>>    End_Procedure // p_ShellExecute
75748>>>    
75748>>>    Function f_Decode_Period String slCode Returns Integer
75751>>>        Move (Uppercase(slCode)) to slCode
75752>>>    
75752>>>        If (slCode='M') Function_Return 1
75755>>>        If (slCode='H') Function_Return Hour_Length
75758>>>        If (slCode='D') Function_Return Day_Length
75761>>>        If (slCode='W') Function_Return (Week_Length*Day_Length)
75764>>>    
75764>>>    End_Function // f_Decode_Period
75765>>>    
75765>>>    Function f_Decode_Day String slDay Returns Integer
75768>>>        Move (Uppercase(slDay)) to slDay
75769>>>    
75769>>>        If (slDay='SU') Function_Return 0
75772>>>        If (slDay='MO') Function_Return 1
75775>>>        If (slDay='TU') Function_Return 2
75778>>>        If (slDay='WD') Function_Return 3
75781>>>        If (slDay='TH') Function_Return 4
75784>>>        If (slDay='FR') Function_Return 5
75787>>>        If (slDay='SA') Function_Return 6
75790>>>    
75790>>>    End_Function// f_Decode_Day
75791>>>    
75791>>>    Procedure p_Write_dTime Integer idTime Date dDtLastRun String sHrLastRun
75794>>>        Boolean bErro
75794>>>    
75794>>>        If (CSAG337.KILL_RECORD=1) Begin
75796>>>            Send Request_Assign of oCSAG337_DD
75797>>>            Send Request_Delete of oCSAG337_DD
75798>>>        End
75798>>>>
75798>>>        Else Begin
75799>>>            Send Request_Assign of oCSAG337_DD
75800>>>            Set Field_Changed_Value of oCSAG337_DD Field CSAG337.LAST_RUN    to idTime
75801>>>            Set Field_Changed_Value of oCSAG337_DD Field CSAG337.LAST_DT_RUN to dDtLastRun
75802>>>            Set Field_Changed_Value of oCSAG337_DD Field CSAG337.LAST_HR_RUN to sHrLastRun
75803>>>            Get Request_Validate of oCSAG337_DD to bErro
75804>>>            If (not(bErro)) Send Request_Save of oCSAG337_DD
75807>>>        End
75807>>>>
75807>>>    End_Procedure // p_Write_dTime
75808>>>    
75808>>>    Procedure p_Work_Loop
75811>>>    
75811>>>        While (1)
75815>>>            Send DoProcess
75816>>>            //---
75816>>>            Sleep 1
75817>>>        End
75818>>>>
75818>>>    
75818>>>    End_Procedure // p_Work_Loop
75819>>>    
75819>>>    // Send p_Work_Loop
75819>>>    
75819>>>
75819>>>End_Object    // oWindowsService
75820>Send p_Work_Loop of oWindowsService
75821>
Summary
Memory Available: 2147483646
Total Warnings : 0
Total Errors   : 0
Total Symbols  : 43483
Total Resources: 0
Total Commands : 75820
Total Windows  : 1
Total Pages    : 1
Static Data    : 456579
Message area   : 521287
Total Blocks   : 27164
